plugins {
	id 'java-library'
	id 'maven-publish'
	id 'signing'
}


repositories {
	mavenLocal()
	mavenCentral()
}

allprojects {
	tasks.withType(Javadoc) {
		options.addStringOption('Xdoclint:none', '-quiet')
	}
}

dependencies {
	//api '<library-group>:<library-name>:<library-version>'
}

sourceSets {
	main {
		java {
			srcDirs 'src'
		}
		resources {
			srcDirs 'src'
				include 'org/adempiere/legacy/apache/ecs/ecs.properties'
			}
	}
}

java {
    withJavadocJar()
    withSourcesJar()
}

tasks.withType(Javadoc) {
	failOnError false
	options.addStringOption('Xdoclint:none', '-quiet')
	options.addStringOption('encoding', 'UTF-8')
	options.addStringOption('charSet', 'UTF-8')
}

tasks.withType(Jar){
	// to fix `Entry org/adempiere/legacy/apache/ecs/ecs.properties is a duplicate but no duplicate handling strategy has been set`
	duplicatesStrategy = DuplicatesStrategy.INCLUDE
}


def entityType = 'D'
version = System.getenv("ADEMPIERE_LIBRARY_VERSION") ?: "local-1.0.0"

jar {
	manifest {
		attributes(
			"Implementation-Title": "Adempiere Tools Module",
			"Implementation-Version": version,
			"EntityType": entityType
		)
	}
}

publishing {
    repositories {
		mavenLocal()

        maven {
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = findProperty("sonatypeUsername")
                password = findProperty("sonatypePassword")
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
        	groupId 'io.github.adempiere'
            artifactId 'tools'
            version
           	from components.java
           	pom {
                name = 'Tools'
                description = 'A tool used for all ADempiere project ans first base library.'
                url = 'http://adempiere.io/'
                licenses {
                    license {
                        name = 'GNU General Public License, version 2'
                        url = 'https://www.gnu.org/licenses/old-licenses/gpl-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'yamelsenih'
                        name = 'Yamel Senih'
                        email = 'ysenih@erpya.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/adempiere/adempiere.git'
                    developerConnection = 'scm:git:ssh://github.com/adempiere/adempiere.git'
                    url = 'http://github.com/adempiere/adempiere'
                }
            }
		}
	}
}


task cleanBuildPublishLocal(type: GradleBuild) {
	tasks = ['clean', 'build', 'publishToMavenLocal']
}

signing {
	def isReleaseVersion = !version.toString().startsWith("local") && !version.toString().endsWith("-SNAPSHOT")

	sign configurations.archives

	setRequired {
		// signing is required if this is a release version and the artifacts are to be published
		// do not use hasTask() as this require realization of the tasks that maybe are not necessary
		(isReleaseVersion || version.toString().equals("build")) && gradle.taskGraph.allTasks.any {
			it.equals(PublishToMavenRepository)
		}
	}

	def signingKey = findProperty("signingKey")
	def signingPassword = findProperty("signingPassword")
	useInMemoryPgpKeys(signingKey, signingPassword)
	sign publishing.publications.mavenJava
}
