plugins {
	id 'java-library'
	id 'maven-publish'
	id 'signing'
}


repositories {
    mavenLocal()
    mavenCentral()
}

allprojects {
    tasks.withType(Javadoc) {
    	options.addStringOption('Xdoclint:none', '-quiet')
   	}
}

dependencies {
	implementation fileTree(
		dir: '../zkwebui/WEB-INF/lib',
		include: [
			'zhtml.jar',
			'keylistener.jar',
		]
	)
	implementation fileTree(
		dir: '../tools/lib/testing',
		include: [
			'SuperCSV-with_src-1.52.jar'
		]
	)

    // https://mvnrepository.com/artifact/com.github.lbordowitz.openforecast/openforecast
    api 'com.github.lbordowitz.openforecast:openforecast:0.5.0'

	// Local
    api project(path: ':base')
    api project(path: ':org.eevolution.distribution')
    api project(path: ':org.adempiere.test')

    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
}

sourceSets {
	main {
		java {
			srcDirs = ['src/main/java/base']
		}
	}
}

java {
    withJavadocJar()
    withSourcesJar()
}

tasks.withType(Javadoc) {
	failOnError false
	options.addStringOption('Xdoclint:none', '-quiet')
	options.addStringOption('encoding', 'UTF-8')
	options.addStringOption('charSet', 'UTF-8')
}


def entityType = 'EE01'
version = System.getenv("ADEMPIERE_LIBRARY_VERSION") ?: "local-1.0.0"

jar {
	manifest {
		attributes(
			"Implementation-Title": "Adempiere Manufacturing Management",
			"Implementation-Version": version,
			"EntityType": entityType
		)
	}
}

publishing {
    repositories {
		mavenLocal()

        maven {
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = findProperty("sonatypeUsername")
                password = findProperty("sonatypePassword")
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
        	groupId 'io.github.adempiere'
            artifactId 'manufacturing'
            version
           	from components.java
           	pom {
                name = 'Manufacturing Management'
				description = 'Manufacturing Management dedicated to manage all related with production BOM, costing, and manufacturing.'
                url = 'http://adempiere.io/'
                licenses {
                    license {
                        name = 'GNU General Public License, version 2'
                        url = 'https://www.gnu.org/licenses/old-licenses/gpl-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'yamelsenih'
                        name = 'Yamel Senih'
                        email = 'ysenih@erpya.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/adempiere/adempiere.git'
                    developerConnection = 'scm:git:ssh://github.com/adempiere/adempiere.git'
                    url = 'http://github.com/adempiere/adempiere'
                }
            }
		}
	}
}


task cleanBuildPublishLocal(type: GradleBuild) {
	tasks = ['clean', 'build', 'publishToMavenLocal']
}

signing {
	def isReleaseVersion = !version.toString().startsWith("local") && !version.toString().endsWith("-SNAPSHOT")

	sign configurations.archives

	setRequired {
		// signing is required if this is a release version and the artifacts are to be published
		// do not use hasTask() as this require realization of the tasks that maybe are not necessary
		(isReleaseVersion || version.toString().equals("build")) && gradle.taskGraph.allTasks.any {
			it.equals(PublishToMavenRepository)
		}
	}

	def signingKey = findProperty("signingKey")
	def signingPassword = findProperty("signingPassword")
	useInMemoryPgpKeys(signingKey, signingPassword)
	sign publishing.publications.mavenJava
}
